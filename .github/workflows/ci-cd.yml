# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Set up Node.js
#       uses: actions/setup-node@v2
#       with:
#         node-version: '14'

#     - name: Install dependencies
#       run: npm install

#     # - name: Run tests
#     #   run: npm test

#     - name: Archive production artifacts
#       run: zip -r my-app.zip .
#       shell: bash

#     - name: Upload artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: my-app
#         path: my-app.zip

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest

#     steps:
#     - name: Download artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: my-app
#         path: my-app.zip

#     - name: Copy files via SSH
#       uses: appleboy/scp-action@v0.1.0
#       with:
#         host: ${{ secrets.EC2_HOST }}
#         username: ${{ secrets.EC2_USER }}
#         key: ${{ secrets.EC2_KEY }}
#         source: "my-app.zip"
#         target: "~/"

#     - name: Deploy application via SSH
#       uses: appleboy/ssh-action@v0.1.0
#       with:
#         host: ${{ secrets.EC2_HOST }}
#         username: ${{ secrets.EC2_USER }}
#         key: ${{ secrets.EC2_KEY }}
#         script: |
#           sudo apt-get update
#           sudo apt-get install -y unzip
#           unzip -o ~/my-app.zip -d ~/my-app
#           cd ~/my-app
#           npm install --production
#           pm2 restart my-app || pm2 start app.js --name my-app

name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Create tarball
        run: tar -cvf my-app.tar ./

      - name: Upload tarball
        uses: actions/upload-artifact@v2
        with:
          name: my-app-tarball
          path: my-app.tar

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download tarball
        uses: actions/download-artifact@v2
        with:
          name: my-app-tarball

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Copy file to server
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa /tmp/my-app.tar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
          
      - name: Deploy application
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}<< 'EOF'
          cd /tmp/
          tar -xvf my-app.tar
          # Add your deployment commands here, for example:
          # npm install --production
          # pm2 restart all
          EOF

  